{
  "name": "FlashROM 99",
  "tagline": "A Flash ROM Cartridge for the TI 99/4A",
  "body": "FlashROM 99\r\n===========\r\n\r\nThe *TI 99/4A Flash ROM Cartridge*, or FlashROM 99 for short, is a cartridge\r\nfor the TI 99/4A home computer that allows for running ROM cartridge images\r\nstored on an SD card.\r\n\r\n![The FlashROM 99 Cartridge](https://raw.githubusercontent.com/endlos99/flashrom99/master/doc/flashrom99.jpg)\r\n\r\nThe FlashROM 99 supports ROM-only images of up to 32K that use the\r\nwrite-to-`>60xx` bank switching scheme.  It will not work with programs\r\nusing GROMs or CRU-based bank switching.  The cartridge does not require the\r\nPeripheral Expansion Box and runs on both PAL and NTSC consoles.\r\n\r\nFlashROM 99 is released as Open Source Hardware under the\r\n[CERN OHL license][4] and the [GNU GPL license][5].  Both hardware design\r\nfiles and firmware sources are available on [GitHub][2].\r\n\r\nThe project homepage is hosted at [GitHub][1].\r\n\r\n\r\nHow to Start with the FlashROM 99\r\n---------------------------------\r\n\r\nUsing the FlashROM 99 is simple and doesn't require and special hardware or\r\nsoftware.\r\n\r\nTo begin, copy up to 171 cartridge image files onto an SD or SDHC card.\r\nSwitch off the TI 99 and plug in the FlashROM 99, then insert the SD card\r\ninto the FlashROM 99.  Switch on the TI 99 and wait until the activity\r\nindicator on the FlashROM 99 is no longer lit.\r\n\r\nPress any key to bring up the TI menu screen.  You should see the list of\r\nimages found on the SD card.  If the SD card contains more than 8 images, a\r\n`FLASHROM 99` entry is shown instead.  Selecting this entry starts an image\r\nbrowser where you can page through the list of available images with `,`,\r\n`.`, `SPACE`, and number keys.\r\n\r\n![Image selection](https://raw.githubusercontent.com/endlos99/flashrom99/master/doc/selection.png)\r\n\r\nSelect the image you want to run.  The screen will show a loader animation\r\nwhile the image loads.  Once the image has been loaded, it will run\r\nautomatically.  The SD card is now no longer required and may be removed.\r\n\r\nIf only one image is found on the SD card, it is loaded immediately without\r\nthe need to select it first.\r\n\r\nIf you want to run a different program from the SD card, reset the TI 99 by\r\npressing `FCTN-=` and then reset the FlashROM 99 by pushing the reset\r\nbutton.  If you do not reset the FlashROM 99, the TI menu will show only the\r\npreviously selected image.  Alternatively, you can power cycle the console,\r\nwhich will reset both TI 99 and FlashROM 99.\r\n\r\n\r\nHow to Use the FlashROM 99\r\n--------------------------\r\n\r\nThe following sections provide a detailed look at the FlashROM 99 and\r\nexplain all of its features.\r\n\r\n\r\n### Images\r\n\r\nA cartridge image is a binary file containing raw machine code that is\r\nloaded verbatim into the TI 99 cartridge memory.  Many programs are\r\ndistributed as image files, and typically have a `.bin` extension.\r\n\r\nAn additional source for images are cartridge files for emulators.  The MESS\r\nemulator, for example, uses `.rpk` files, which are ordinary ZIP archives\r\nwith an unconventional extension.  Images files for Classic 99 can be used\r\nas-is.\r\n\r\nFinally, many assemblers such as the [`xas99` cross-assembler][3] can\r\ngenerate images.  Note that files generated for Editor/Assembler Option 5\r\n*cannot* be used!\r\n\r\nImages are single files or multiple files with a common root name:\r\n\r\n    helloc.bin\r\n    hellod.bin\r\n\r\nIf you also see a file ending in `G`\r\n\r\n\thellog.bin\r\n\r\nthen the image is using GROMs and cannot be used for the FlashROM 99.\r\n\r\nThe FlashROM 99 uses single-file images of up to 32K that must be\r\n\"non-inverted\", which is the default until noted otherwise by the creator.\r\nIf you have an inverted image, you can use the Python script `invert.py` in\r\nthe `lib/` folder: An inverted inverted image is a non-inverted image.\r\n\r\nUnfortunately, there's no way to determine if an image is inverted or not --\r\nyou'll have to try it.  Usually, images ending in `8` are non-inverted, and\r\nimages ending in `9` are inverted.  If an image crashes the TI 99, invert it\r\nand see if that works instead.\r\n\r\nTo use multi-file images, you need to concatenate the individual files into\r\na single file:\r\n\r\n\t$ cat hello?.bin > hello.bin                        # Linux and Mac\r\n\tc:> copy /b helloc.bin + /b hellod.bin hello.bin    # Windows\r\n\r\nNote that the FlashROM 99 can also be built with multi-file support, but as\r\nthis deteriorates the startup time this option is not enabled by default.\r\n\r\nImages may have more than one program entry to select.  The FlashROM 99\r\nlists all entries of all images.\r\n\r\n\r\n### SD Cards\r\n\r\nThe FlashROM 99 supports both SD and SDHC cards of class 4 or higher.\r\nSlower and unrated cards may also work, just try and see.\r\n\r\nCards must be formatted with the FAT16 or FAT32 filesystem.  FAT16 is the\r\ndefault for new SD cards of up to 2 GB, and FAT32 is the default for new\r\nSDHC cards of 4 GB and up.\r\n\r\nNote that some cards seem to have a difficult personality.  For SD cards, it\r\nmay help to use FAT32 instead of the FAT16 default.  If you absolutely\r\ncannot get a particular SD/SDHC card to work, just move on and use a\r\ndifferent one.\r\n\r\nImage files can be dragged and dropped as-is into the root folder of the SD\r\ncard.  Filenames must end in `.bin`, but case is ignored.  Files with other\r\nextensions may be present and are skipped.  For multi-file images, filenames\r\nmust have at most 8 characters w/o extension due to filesystem limitations.\r\n\r\nThe FlashROM 99 handles up to 171 image entries per SD card.  Additional\r\nimages will be ignored.\r\n\r\n\r\n### Operation\r\n\r\nThe FlashROM 99 is always in one of two modes: _menu mode_ or _image mode_.\r\n\r\nWhen powering up, or after pushing the reset button, the FlashROM 99 is in\r\nmenu mode.  In this mode, the TI 99 menu screen shows the list of available\r\nimages or the image browser.  Selecting an entry will load the selected\r\nimage from the SD card and run it.  Once the image is running, the FlashROM\r\n99 switches to image mode.\r\n\r\nIn image mode, the FlashROM 99 acts like a ROM cartridge containing the\r\nselected image only.  In this mode, the TI 99 menu screen shows the entries\r\nof the selected image.  Pressing `FCTN-=` will warm reset the console\r\nwithout affecting the currently stored image.  The only way to return to\r\nmenu mode is to push the FlashROM 99 reset button, to power cycle the\r\nconsole, or to remove and re-plug the FlashROM 99 cartridge.\r\n\r\nNote that the SD card is scanned only once in menu mode.  If you swap SD\r\ncards you need to push the reset button to re-read the SD card.  Once in\r\nimage mode, the SD card is no longer needed and may be removed until you\r\nwant to run a different image.\r\n\r\nIf only one image is found on the SD card, then it is loaded immediately.\r\nIn this case the FlashROM 99 skips menu mode and enters image mode directly.\r\n\r\nThe activity indicator LED lights up whenever the FlashROM 99 is busy\r\nreading the SD card.  During this time, the entire cartridge is \"offline\" so\r\nthat the TI 99 cannot detect that a cartridge is plugged in.  You may still\r\noperate the console, e.g., work with TI BASIC, while the LED is on, but\r\ndepending on your actions you may crash the TI 99.\r\n\r\nTo summarize, these simple rules of thumb will make sure that you run the\r\nFlashROM 99 without issues:\r\n\r\n- After inserting an SD card, push the FlashROM 99 reset button or power\r\n  cycle the console.\r\n- Only push the reset button when the TI 99 title screen is shown.\r\n- Leave both TI 99 and SD card alone whenever the LED is lit and not\r\n  blinking.\r\n\r\nIt is not possible to damage the FlashROM 99 by incorrect operation,\r\nassuming that shorting contacts or smashing components is way beyond\r\nincorrect operation.\r\n\r\n\r\n### Compatibility\r\n\r\nIn general, all cartridge dumps with a compatible banking scheme should work\r\nfine on the FlashROM 99.  Some images converted from other formats, in\r\nparticular many modern homebrew programs, may also require a 32K RAM\r\nexpansion.\r\n\r\nSome programs, however, don't expect to be started by something other than\r\nthe TI 99 boot menu, or have difficulties to deal with the remnants of\r\npreviously run programs left over by a warm reset.  In rare cases, this may\r\nlead to graphical glitches or other unexpected behavior.\r\n\r\nPlease refer to the troubleshooting section for a list of games known with\r\nissues.\r\n\r\nIf you find additional images that don't work as intended on the FlashROM\r\n99, please send a note to the developer at <r@0x01.de>, maybe the issue can\r\nbe fixed with a software update for the 8515.\r\n\r\n\r\nHow the FlashROM 99 Works\r\n-------------------------\r\n\r\nThe FlashROM 99 uses a 32K SRAM chip to store a cartridge image of up to\r\nthat size.  The TI 99 addresses the SRAM just like it would address a\r\ncartridge ROM chip.\r\n\r\nThe 377 register maps 8K banks of the 32K SRAM into the cartridge space\r\n`>6000` through `>7FFF`.  The bank switching design used here was originally\r\ndeveloped by Jon Guidry (acadiel) for the [16K multi-cart][6] and has since\r\nbeen used in many homebrew projects.\r\n\r\nThe ATmega 8515 microcontroller reads the SD card and writes first the menu\r\nand browser code and then the selected image into the SRAM chip.  The\r\nmicrocontroller code uses a modified version of the [Petit FatFs][8] library\r\nto make sense of the FAT16/FAT32 filesystems used by SD cards.\r\n\r\nWhenever the 8515 is active, the TI 99 must not access the SRAM chip, or the\r\nTI 99 will crash, and either one might get damaged.  Thus, three 541 line\r\ndrivers isolate the FlashROM 99 from the cartridge bus whenever the ATmega\r\nis writing to the SRAM.\r\n\r\nThe 377 also buffers the serial one-way communication from the TI 99 to the\r\nFlashROM 99 that relays the image selection.  The `>6800` address line\r\ntransmits the bit data and the `>7000` address line transmits the clock.\r\nCurrently, 9 bytes of data are transferred, containing the filename of the\r\nselected image.\r\n\r\nWhile the image loads, the TI 99 reads ROM address `>6000` continuously.\r\nWhen the cart if offline, this yields value `0000`, but as soon as the cart\r\ngoes back online the TI 99 will see the GPL header `AAxx` and jump to the\r\nloaded image.\r\n\r\n\r\nTroubleshooting the FlashROM 99\r\n-------------------------------\r\n\r\nIf something isn't working as it should, please try the official test program\r\nfirst.\r\n\r\nCopy [`BANKTEST.BIN`][92] as single file onto an SD card and\r\npower up your TI 99 with the FlashROM 99.  Wait for the LED to turn off, then\r\npress any key to bring up the TI menu.\r\n\r\nIn the menu, you should see an entry for `BANK TEST /x`.  Select the bank test\r\nto see this screen:\r\n\r\n![Bank Test Result](https://raw.githubusercontent.com/endlos99/flashrom99/master/doc/banktest.png)\r\n\r\nIf the bank test doesn't work for you please check the following list for\r\nsome suggestions.\r\n\r\n\r\n#### The TI 99 title screen won't show.\r\n\r\nThe TI 99 detects the FlashROM 99, but it cannot access the RAM contents.\r\n\r\nCheck if the 541s are mounted correctly -- two are upside down.  Also look\r\nfor bad solder joints, in particular for the 541s and the 8515.  Finally,\r\nverify that you flashed the software to the 8515 correctly.\r\n\r\n#### The LED blinks.\r\n\r\nIf the LED starts blinking, the FlashROM 99 could not read some part of the\r\nSD card:\r\n\r\n- 1 blip: bad SD card reader, bad SD card, or wrong filesystem\r\n- 2 blips: corrupt filesystem\r\n- 3 blips: corrupt root directory\r\n\r\nTry re-formatting your SD card using FAT32, or try a different card.\r\n\r\n#### No menu entries.\r\n\r\nThe TI 99 starts normally, but the menu shows only TI BASIC.\r\n\r\nIf the LED doesn't turn on at least briefly when powering up or pushing\r\nreset, some contacts on the card or the 8515 may be bad.\r\n\r\nIf the LED does light up, make sure that your SD card contains at least one\r\nvalid image file, ending in `.bin` or `.BIN`, that is at most 32K big.  You\r\ncan use the Python script `lib/mklcart.py` to generate an `.rpk` file to\r\ncheck any image file in MESS.\r\n\r\n#### Programs crash.\r\n\r\nThe menu shows fine, but running some particular program crashes, either\r\nright away or after some using the program for some time.\r\n\r\nYou may run an inverted image, an image requiring a GROM, an image with an\r\nincompatible bank switch scheme, or a \"fragile\" cartridge program.\r\n\r\nTo fix an inverted image, use the `lib/invert.py` script.  Note that image\r\nfiles with 8K only cannot be inverted.\r\n\r\nA \"fragile\" program is a program that makes certain assumptions about the\r\nstate of scratchpad RAM and VDP RAM when it starts.  Try loading the program\r\ndirectly to RAM by copying this image file as the only file on an SD card.\r\nThis will provide the exact environment the program expects.\r\n\r\nIf this doesn't help, the image may be incompatible.  Please send a note to\r\nthe developer at <r@0x01.de> for further analysis.\r\n\r\n#### Programs don't work properly.\r\n\r\nSome functionality of the program doesn't work as expected.\r\n\r\nSome games don't expect to be started by another program or to find the\r\nremnants of previously run programs.  This may lead to graphical glitches or\r\nother unexpected behavior.\r\n\r\nTry restarting the program by pressing `FCTN-=` and selecting it from the\r\nmenu again to eliminate most issues.  Alternatively, put the image as the\r\nonly image on the SD card so that it is loaded directly.\r\n\r\nIf this doesn't help, please send a note to the developer at <r@0x01.de> for\r\nfurther analysis.\r\n\r\n#### Programs with known issues.\r\n\r\nThese programs are known to have some flaws when run on the FlashROM 99:\r\n\r\n- Console Writer: Input line shows dotted pattern.\r\n\r\nNote that for now, this list refers to particular images tested.  There\r\nmight be different images of those programs that work.\r\n\r\n\r\nWhere to Get the FlashROM 99\r\n----------------------------\r\n\r\nThe [GitHub repository][2] contains all hardware design files and software\r\nsources required to build the FlashROM 99 yourself.\r\n\r\nThe developer does not offer any parts currently.\r\n\r\n\r\nAbout the Project\r\n-----------------\r\n\r\nThe TI 99/4A Flash ROM Cartridge is Open Source Hardware released under the\r\n[CERN OHL license][4], in the hope that TI 99 enthusiasts may find it useful.\r\nSoftware components are released under the [GNU GPL license][5].\r\n\r\nThe hardware was designed with the open source electronics design automation\r\nsuite [KiCad][7].  The microcontroller code uses a modified version of the\r\n[Petit FatFs][8] library.  Thanks go to Jon Guidry (acadiel) of `hexbus.com`\r\nfor designing the original bank switching circuitry for the first TI\r\nmulti-carts.\r\n\r\nContributions to both hardware and software are welcome.  Please email\r\nfeedback, support questions, inquiries for parts, and bug reports to the\r\ndeveloper at <r@0x01.de>.  Discussions about the FlashROM 99 happen over at\r\n[AtariAge][9].\r\n\r\n\r\n[1]: https://endlos99.github.io/flashrom99\r\n[2]: https://github.com/endlos99/flashrom99\r\n[3]: https://endlos99.github.io/xdt99\r\n[4]: http://www.ohwr.org/projects/cernohl/wiki\r\n[5]: http://www.gnu.org/licenses/gpl.html\r\n[6]: http://www.hexbus.com/TI-99_4A_Home_Computer_Page/Hardware_Projects.html\r\n[7]: http://kicad-pcb.org\r\n[8]: http://elm-chan.org/fsw/ff/00index_p.html\r\n[9]: http://atariage.com/forums/topic/250540-flash-rom-cart\r\n[91]: https://github.com/endlos99/flashrom99/blob/master/doc/R1DISKFIX.md\r\n[92]: https://raw.githubusercontent.com/endlos99/flashrom99/master/images/banktest.bin\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}