{
  "name": "FlashROM 99",
  "tagline": "A Flash ROM Cartridge for the TI 99/4A",
  "body": "FlashROM 99\r\n===========\r\n\r\nThe *TI 99/4A Flash ROM Cartridge*, or FlashROM 99 for short, is a cartridge\r\nfor the TI 99/4A home computer that allows for running ROM cartridge images\r\nstored on an SD card.\r\n\r\n![The FlashROM 99 Cartridge](https://raw.githubusercontent.com/endlos99/flashrom99/master/doc/flashrom99.jpg)\r\n\r\n\r\nThe FlashROM 99 supports ROM-only images of up to 32K that use the\r\nwrite-to-ROM bank switching scheme.  It will not work with programs using\r\nGROMs or CRU-based bank switching.\r\n\r\nFlashROM 99 is released as Open Source Hardware under the\r\n[CERN OHL license][4] and the [GNU GPL license][5].  Both hardware design\r\nfiles and firmware sources are available on [GitHub][2].\r\n\r\n\r\nQuick Start\r\n-----------\r\n\r\nUsing the FlashROM 99 is simple and doesn't require and special hardware or\r\nsoftware.\r\n\r\nTo begin, copy up to 171 cartridge image files onto an SD card.  Switch off\r\nthe TI 99 and plug in the FlashROM 99, then insert the SD card into the\r\nFlashROM 99.  Switch on the TI 99 and wait until the activity indicator on\r\nthe FlashROM 99 is no longer lit.\r\n\r\nPress any key to bring up the TI menu screen.  You should see the list of\r\nimages found on the SD card.  If the SD card contains more than 8 images, a\r\n`FLASHROM 99` entry is shown instead.  Selecting this entry starts an image\r\nbrowser where you can page through the list of available images with `,`,\r\n`.`, `SPACE`, and number keys.\r\n\r\nSelect the image you want to run.  The screen will show a loader animation\r\nwhile the image loads.  Once the image has been loaded, it will run\r\nautomatically.  The SD card is now no longer required and may be removed.\r\n\r\nIf only one image is found on the SD card, it is loaded immediatly without\r\nthe need to select it first.\r\n\r\nIf you want to run a different program from the SD card, reset the TI 99 by\r\npressing `FCTN-=` and then reset the FlashROM 99 by pushing the reset\r\nbutton.  If you do not reset the FlashROM 99, the TI menu will show only the\r\npreviously selected image.  Alternatively, you can power cycle the console,\r\nwhich will reset both TI 99 and FlashROM 99.\r\n\r\n\r\nHow to Use the FlashROM 99\r\n--------------------------\r\n\r\nThe following sections provide a detailed look at the FlashROM 99 and\r\nexplain all of its features.\r\n\r\n\r\n### Images\r\n\r\nA cartridge image is a binary file containing raw machine code that is\r\nloaded verbatim into the TI 99 cartridge memory.  Many programs are\r\ndistributed as image files, and typically have a `.BIN` extension.\r\n\r\nAn additional source for images are cartridge files for emulators.  The MESS\r\nemulator, for example, uses `.rpk` files, which are ordinary ZIP archives\r\nwith an unconventional extension.  Ignoring `layout.xml` and `meta-inf.xml`,\r\nif you see one or two files that end in `C.BIN` and `D.BIN`, you're good to\r\ngo.  If you also see a `G.BIN`, however, then this cartridge contains a GROM\r\nand cannot be used.\r\n\r\nFinally, many assemblers such as the [`xas99` cross-assembler][3] can\r\ngenerate images.  Note that files generated for Editor/Assembler Option 5\r\n*cannot* be used!\r\n\r\nImages are single files of up to 32K that must be \"non-inverted\", which is\r\nthe default until noted otherwise by the creator.  If you have an inverted\r\nimage, you can use the Python script `invert.py` in the `lib/` folder: An\r\ninverted inverted image is a non-inverted image.\r\n\r\nUnfortunately, there's no way to determine if an image is inverted or not --\r\nyou'll have to try it.  If an image crashes the TI 99, invert it and see if\r\nthat works instead.\r\n\r\nSome images are split into multiple files of 8K each and named sequentially,\r\nwith the first file ending in `C`:\r\n\r\n    HELLOC.BIN\r\n    HELLOD.BIN\r\n\r\nYou can use multi-file images by concatenating the files into a single file:\r\n\r\n\t$ cat HELLO?.BIN > HELLO.BIN                        # Linux and Mac\r\n\tC:> copy /b HELLOC.BIN + /b HELLOD.BIN HELLO.BIN    # Windows\r\n\r\nNote that the FlashROM 99 can also be built with multi-file support, but as\r\nthis deteriorates the startup time this option is not enabled by default.\r\n\r\nImages may have more than one program entry to select.  The FlashROM 99\r\nlists all entries for all images.\r\n\r\n\r\n### SD Cards\r\n\r\nThe FlashROM 99 supports both SD and SDHC cards of class 4 or higher.\r\nUnrated cards may also work, just try and see.\r\n\r\nCards must be formatted with the FAT16 or FAT32 filesystem.  FAT16 is the\r\ndefault for new SD cards of up to 2 GB, and FAT32 is the default for new\r\nSDHC cards of 4 GB and up.  Windows let you choose which filesystem to use\r\nwhen formating a new card, so it's best to go with the default.\r\n\r\nNote that some cards seem to have a difficult personality.  If you\r\nabsolutely cannot get a particular SD/SDHC card to work, just move on to\r\nanother one.\r\n\r\nImage files can be dragged and dropped as-is into the root folder of the SD\r\ncard.  Filenames must end in `.BIN`, but case is ignored.  Files with other\r\nextensions may be present and are skipped.  For multi-file images, filenames\r\nmust have at most 8 characters w/o extension due to filesystem limitations.\r\n\r\nThe FlashROM 99 handles up to 171 image entries per SD card.  Additional\r\nimages will be ignored.\r\n\r\n\r\n### Operation\r\n\r\nThe FlashROM 99 is always in one of two modes: _menu mode_ or _image mode_.\r\n\r\nWhen powering up, or after pushing the reset button, the FlashROM 99 is in\r\nmenu mode.  In this mode, the TI 99 menu screen shows the list of available\r\nimages or the image browser.  Selecting an entry will load the selected\r\nimage from the SD card and run it.  Once the image is running, the FlashROM\r\n99 switches to image mode.\r\n\r\nIn image mode, the FlashROM 99 acts like a ROM cartridge containing the\r\nselected image only.  In this mode, the TI 99 menu screen shows the entries\r\nof the selected image.  Pressing `FCTN-=` will warm reset the console\r\nwithout affecting the currently stored image.  The only way to return to\r\nmenu mode is to push the FlashROM 99 reset button, to power cycle the\r\nconsole, or to remove and re-plug the FlashROM 99 cartridge.\r\n\r\nNote that the SD card is read only once in menu mode.  If you swap SD cards\r\nyou need to push the reset button to re-read the SD card.  Once in image\r\nmode, the SD card is no longer needed and may be removed until you want to\r\nrun a different image.\r\n\r\nIf only one image is found on the SD card, then it is loaded immediately.\r\nIn this case the FlashROM 99 skips menu mode and enters image mode directly.\r\n\r\nThe activity indicator LED lights up whenever the FlashROM 99 is busy\r\nreading the SD card.  During this time, the entire cartridge is \"offline\" so\r\nthat the TI 99 cannot detect that a cartridge is plugged in.  You may still\r\noperate the console, e.g., work with TI BASIC, while the LED is on, but\r\ndepending on your actions you may crash the TI 99.\r\n\r\n\r\n### TL;DR\r\n\r\nAbove description may sound confusing at first, but operation is actually\r\nstraightforward in practice.  Some simple rules of thumb will help you to\r\nuse the FlashROM 99 successfully:\r\n\r\n- After inserting an SD card, push the FlashROM 99 reset button or power\r\n  cycle the console.\r\n- Only push the reset button when the TI 99 title screen is shown.\r\n- Leave both TI 99 and SD card alone whenever the LED is lit and not\r\n  blinking.\r\n\r\nIt is not possible to damage the FlashROM 99 by incorrect operation,\r\nassuming that shorting contacts or smashing components is way beyond\r\nincorrect operation.\r\n\r\n\r\nHow the FlashROM 99 Works\r\n-------------------------\r\n\r\nThe FlashROM 99 uses a 32K SRAM chip to store a cartridge image of up to\r\nthat size.  The TI 99 addresses the SRAM just like it would address a\r\ncartridge ROM chip.\r\n\r\nThe 377 register maps 8K banks of the 32K SRAM into the cartridge space\r\n`>6000` through `>7FFF`.  The bank switching design used here was originally\r\ndeveloped by Jon Guidry (acadiel) for the [16K multi-cart][8] and has since\r\nbeen used in many homebrew projects.\r\n\r\nThe ATmega 8515 microcontroller reads the SD card and writes first the menu\r\nand browser code and then the selected image into the SRAM chip.  The\r\nmicrocontroller code uses a modified version of the [Petit FatFs][9] library\r\nto make sense of the FAT16/FAT32 filesystems used by the SD cards.\r\n\r\nWhenever the 8515 is active, the TI 99 must not access the SRAM chip, or the\r\nTI 99 will crash and either one might get damaged.  Thus, three 541 line\r\ndrivers isolate the FlashROM 99 from the cartridge bus whenever the ATmega\r\nis writing to the SRAM.\r\n\r\nThe 377 also buffers the serial one-way communication from the TI 99 to the\r\nFlashROM 99 that relays the image selection.  The `>6800` address line\r\ntransmits the bit data and the `>7000` address line transmits the clock.\r\nCurrently, 10 bytes of data are transferred, containing the filename and\r\nsome internal data of the selected image.\r\n\r\n\r\nWhere to Get the FlashROM 99\r\n----------------------------\r\n\r\nThe [GitHub repository][2] contains all hardware design files and software\r\nsources required to build the FlashROM 99 yourself.\r\n\r\nYour can also purchase a professionally made FlashROM 99 PCB board for €10\r\nor a fully assembled FlashROM 99 cartridge for €45 plus shipping and\r\nhandling.  Please contact the developer at <r@0x01.de> for further\r\ninformation.\r\n\r\n\r\nAbout the Project\r\n-----------------\r\n\r\nThe TI 99/4A Flash ROM Cartridge is Open Source Hardware released under the\r\n[CERN OHL license][4], in the hope that TI 99 enthusiasts may find it useful.\r\nSoftware components are released under the [GNU GPL license][5].\r\n\r\nThanks go to Jon Guidry (acadiel) of `hexbus.com` for designing the original\r\nbank switching circuitry for the first TI multi-carts.\r\n\r\nContributions to both hardware and software are welcome.  Please email\r\nfeedback, support questions, inquiries for parts, and bug reports to the\r\ndeveloper at <r@0x01.de>.\r\n\r\n\r\n[1]: https://endlos99.github.io/flashrom99\r\n[2]: https://github.com/endlos99/flashrom99\r\n[3]: https://endlos99.github.io/xdt99\r\n[4]: http://www.ohwr.org/projects/cernohl/wiki\r\n[5]: http://www.gnu.org/licenses/gpl.html\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}