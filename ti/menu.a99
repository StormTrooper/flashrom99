**********************************************************************
*
*  FlashROM 99 Menu
*
*  Copyright (c) 2016 Ralph Benzinger <r@0x01.de>
*
*  This program is free software; you can redistribute it and/or
*  modify it under the terms of the GNU General Public License
*  as published by the Free Software Foundation; either version 3
*  of the License, or (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with this program; if not, write to the Free Software
*  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA, USA.
*
**********************************************************************

       
       ref  vdpwa, vdpwd

scratchpad:
       equ  >8300
ws:
       equ  >83e0             ; workspace
ws_r0lb:
       equ  ws + 1
ws_r1:
       equ  ws + 2
ws_r1lb:
       equ  ws + 3
ws_r3lb:
       equ  ws + 7
ws_r5:
       equ  ws + 10
ws_r9lb:
       equ  ws + 19
ws_r10lb:
       equ  ws + 21

initial_scratchpad:
       equ  >0500             ; unused sprite pattern table
loader_ram_usage:
       equ  >b0

       aorg >6000

* GPL header

       data >aa01
       data >0000
       data >0000             ; power-up list
       data image_data + 12   ; program list
       data >0000             ; DSR list
       data >0000             ; subprogram list
       data 0
       data 0

* menu selections

entry_2:
       mov  @const, @ws_r5    ; 8 bytes per menu item
       jmp  main
entry_3:
       mov  @const+2, @ws_r5
       jmp  main
entry_4:
       mov  @const+4, @ws_r5
       jmp  main
entry_5:
       mov  @const+6, @ws_r5
       jmp  main
entry_6:
       mov  @const+8, @ws_r5
       jmp  main
entry_7:
       mov  @const+10, @ws_r5
       jmp  main
entry_8:
       mov  @const+12, @ws_r5
       jmp  main
entry_9:
       mov  @const+14, @ws_r5
       jmp  main
entry_more:
       jmp  browser

* main program

main:
       limi 0
       lwpi ws
       bl   @save_scratchpad

       li   r3, 32 + 17
       bl   @title
       
load:
       ; prepare animation
       li   r0, >800 + (>80 * 8)
       li   r1, anim_data
       li   r2, 8 * 4
       bl   @vmbw

       ; move sender to scratchpad RAM so that cart RAM can be overwritten
       li   r0, scratchpad
       li   r1, loader
       li   r2, loader_end - loader
!      mov  *r1+, *r0+
       dect r2
       jne  -!

       ; sender setup               ; R5 = selected image * 40
       li   r0, >42fe               ; throbber position + VDP write bit
       mov  @image_data+8(r5), r6   ; R6 = GPL header start
       ori  r6, >aa00
       mov  @image_data+10(r5), r7  ; R7 = entry address
       li   r8, vdpwa               ; R8 = save space in loader
       li   r2, 9                   ; R2 = number of bytes to send

       ; send loader data
       b    @send

* FlashROM title

title:
       mov  r11, r10

       ; load char set and title pattern
       li   r0, >800 + (>20 * 8)
       li   r1, font_data
       li   r2, (>80 - >20 + 30) * 8
       bl   @vmbw

       clr  r0
       li   r1, title_text
       mov  r3, r2
       bl   @vmbw

       b    *r10

* save most scratchpad state to VDP RAM

save_scratchpad:
       mov  r11, r10
       li   r0, initial_scratchpad
       li   r1, send
       li   r2, loader_ram_usage - (send - scratchpad)
       bl   @vmbw
       b    *r10

* image browser

browser:
       copy "browser.a99"

* loader

       even
loader:
       xorg scratchpad

       ; jump to image
jump:
       movb @vdprd, *r0+      ; restore scratchpad
       dec  r2                ; registers have been set up
       jne  jump

       ;limi  2               ; seems to work better without ...
       b    *r7               ; start program

       ; send selected image data to cart
send:
       movb @image_data(r5), r4  ; byte to send
       li   r3, 8
send_bit:
       clr  @>6000            ; signal new bit
       sla  r4, 1
       joc  !
       clr  @>7000            ; send 0
       jmp  next_bit
!      clr  @>7800            ; send 1
next_bit:
       dec  r3
       jne  send_bit
       inc  r5                ; next byte
       dec  r2
       jne  send

       clr  @>6000            ; done

       ; show animation while image loads
anim_speed:
       equ  >900

       clr  r3
animate:
       dec  r3
       movb @ws_r3lb, r1      ; throbber
       andi r1, >0300         ; 4 different patterns
       ori  r1, >8000
       swpb r0                ; vsbw
       movb r0, *r8
       swpb r0
       movb r0, *r8
       movb r1, @vdpwd

       ; busy wait until image is ready
       li   r4, anim_speed    ; anim speed
       clr  r5                ; number of ready hits
wait:
       mov  @>6000, r2
       c    r2, r6            ; image ready?
       jne  !
       inc  r5                ; image seems ready
!      dec  r4
       jne  wait
       ci   r5, anim_speed    ; were all checks good?
       jl   animate

       ; image ready: clear screen
       li   r0, >0040
       li   r1, '  '
       li   r2, 768
       movb r0, *r8
       swpb r0
       movb r0, *r8
!      movb r1, @vdpwd
       dec  r2
       jne  -!

       ; prepare scratchpad restoration
       li   r0, initial_scratchpad
       swpb r0
       movb r0, *r8
       swpb r0
       movb r0, *r8
       li   r0, send
       li   r2, loader_ram_usage - (send - scratchpad)

       ; undo loader and jump to image
       jmp  jump

loader_end:
       aorg

       .ifge loader_end - loader, loader_ram_usage
       .error "loader too large"
       .endif

       copy "vsbw.a99"        ; part of xas99 (lib/)
       copy "vmbw.a99"
       copy "vmbr.a99"
       copy "vsbmw.a99"

* constants
       
       ; menu image ids * 36
const:
       data 0, 36, 2 * 36, 3 * 36
       data 4 * 36, 5 * 36, 6 * 36, 7 * 36

title_text:
       text '  `abcdefghijklmn  (C) 2016 RB  '
       text '  opqrstuvwxyz{|}^   <, #/# .>'

       ; animation patterns
anim_data:
       text >0060600000060600
       text >000000c3c3000000
       text >0006060000606000
       text >1818000000001818

       ; Jet Set Willy font
font_data:
       data >0000, >0000, >0000, >0000   ; >20
       data >0010, >1010, >1000, >1000
       data >0024, >2400, >0000, >0000
       data >0024, >7e24, >247e, >2400
       data >0008, >3e28, >3e0a, >3e08
       data >0062, >6408, >1026, >4600
       data >0010, >2810, >2a44, >3a00
       data >0008, >1000, >0000, >0000
       data >0004, >0808, >0808, >0400
       data >0020, >1010, >1010, >2000
       data >0000, >1408, >3e08, >1400
       data >0000, >0808, >3e08, >0800
       data >0000, >0000, >0008, >0810
       data >0000, >0000, >3e00, >0000
       data >0000, >0000, >0018, >1800
       data >0000, >0204, >0810, >2000
       data >003c, >464a, >5262, >3c00  ; >30
       data >0018, >2808, >0808, >3e00
       data >003c, >4202, >3c40, >7e00
       data >003c, >420c, >0242, >3c00
       data >0008, >1828, >487e, >0800
       data >007e, >407c, >0242, >3c00
       data >003c, >407c, >4242, >3c00
       data >007e, >0204, >0810, >1000
       data >003c, >423c, >4242, >3c00
       data >003c, >4242, >3e02, >3c00
       data >0000, >0010, >0000, >1000
       data >0000, >1000, >0010, >1020
       data >0000, >0408, >1008, >0400
       data >0000, >003e, >003e, >0000
       data >0000, >1008, >0408, >1000
       data >003c, >4204, >0800, >0800
       data >003c, >4a56, >5e40, >3c00  ; >40
       data >003c, >4242, >7e42, >4200
       data >007c, >427c, >4242, >7c00
       data >003c, >4240, >4042, >3c00
       data >0078, >4442, >4244, >7800
       data >007e, >407c, >4040, >7e00
       data >007e, >407c, >4040, >4000
       data >003c, >4240, >4e42, >3c00
       data >0042, >427e, >4242, >4200
       data >003e, >0808, >0808, >3e00
       data >0002, >0202, >4242, >3c00
       data >0044, >4870, >4844, >4200
       data >0040, >4040, >4040, >7e00
       data >0042, >665a, >4242, >4200
       data >0042, >6252, >4a46, >4200
       data >003c, >4242, >4242, >3c00
       data >007c, >4242, >7c40, >4000  ; >50
       data >003c, >4242, >524a, >3c00
       data >007c, >4242, >7c44, >4200
       data >003c, >403c, >0242, >3c00
       data >00fe, >1010, >1010, >1000
       data >0042, >4242, >4242, >3c00
       data >0042, >4242, >4224, >1800
       data >0042, >4242, >425a, >2400
       data >0042, >2418, >1824, >4200
       data >0082, >4428, >1010, >1000
       data >007e, >0408, >1020, >7e00
       data >000e, >0808, >0808, >0e00
       data >0000, >4020, >1008, >0400
       data >0070, >1010, >1010, >7000
;      data >0010, >3854, >1010, >1000
       ; use >5e (^) as version indicator
version:
       text >0000009296a2a2c7  ; v1
;      text >0000009791a7a4c7  ; v2
;      text >0000009791a7a1c7  ; v3
;      text >0000009595a7a1c1  ; v4
       ; back to regular font
       data >0000, >0000, >0000, >00ff  ; >5f

       ; FlashROM 99 title
       text >ffffffe0e0e0ffff  ; >60 / >80
       text >eeeeee0e0e0e0e0e
       text >00000000003e7fff
       text >0000000000e1e3e7
       text >0000000000f8fcfe
       text >e0e0e0e0e0efffff
       text >0f0f0f0e0e8ecfef
       text >f8fcfe0e0e0efefc
       text >3f7fffe0e0e0e0e0
       text >8ecfefefefeeeeee
       text >0e1ebefefeeeee0e
       text >0103070707070703
       text >fcfeff070707ffff
       text >1f3f7f7070707f3f
       text >c0e0f0707070f0f0
       text >ffe0e0e0e0e0e0e0
       text >0e0e0e0e0e0e0e0e  ; >70
       text >e0e0e0e0e0ff7f3e
       text >efefe7e0e0efe7e3
       text >0080fc3e1efcf8f0
       text >f1e0e0e0e0e0e0e0
       text >efeeeeeeeeeeeeee
       text >f83c1e0e0e0e0e0e
       text >e0e0e0e0e0ff7f3f
       text >eeeeeeeeeeeece8e
       text >0e0e0e0e0e0e0e0e
       text >0100000707070301
       text >ff07070707fffefc
       text >1f000070707f3f1f
       text >f070707070f0e0c0  ; >7d

end_of_program

*** constant program part ends here ***

image_data:
       equ  >6800

       ; menu items: 36 bytes per entry, 8 entries
       ;   8 bytes   filename w/o extension
       ;   1 byte    \0
       ;   1 byte    number of delays
       ;   2 bytes   start address image
       ;   2 bytes   next entry             \ 
       ;   2 bytes   loader program         | actual
       ;   1 byte    entry name length      | cart menu
       ;  19 bytes   entry name and padding /

browser_data:
       equ  image_data + (8 * 36)

       ; browser items: 32 bytes per entry
       ;   8 bytes   filename w/o extension
       ;   1 byte    \0
       ;   1 byte    number of delays
       ;   2 bytes   start addr image
       ;  20 bytes   entry name and padding

       ; total for 171 images:     >1680 bytes
       ; -> available for program:  >980 bytes

       .ifge end_of_program, image_data
       .error "program too large"
       .endif


* TEST ONLY --v

       .ifdef TEST            ; set to assemble self-contained test cart
       copy "sample.a99"
       .endif
       
* TEST ONLY --^

       end
